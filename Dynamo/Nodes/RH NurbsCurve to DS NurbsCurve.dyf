<Workspace Version="0.7.2.24887" X="32" Y="83" zoom="1" Description="Converts Rhino Nurbs Curves to Design Script Nurbs Curves. Keep in mind that within OpenNURBS library Ellipses are defined as a NurbsCurve so it will also be passed by this node." Category="Archi-lab_MantisShrimp.ReadRhino" Name="RH NurbsCurve to DS NurbsCurve" ID="18f57aa6-a00d-488e-bc4a-1a50e91b7b1c">
  <Elements>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="ee77b5c7-926a-492a-8711-23a15596ac3a" nickname="Python Script" x="250" y="0" isVisible="false" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>#Copyright(c) 2014, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
import sys
clr.AddReference('ProtoGeometry')

RhinoCommonPath = r'C:\Program Files\Rhinoceros 5 (64-bit)\System'
if RhinoCommonPath not in sys.path:
	sys.path.Add(RhinoCommonPath)
clr.AddReferenceToFileAndPath(RhinoCommonPath + r"\RhinoCommon.dll")

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

from Autodesk.DesignScript.Geometry import *
import Rhino as rc

from System import Array
from System.Collections.Generic import *

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
rhObjects = IN[0]

#point/control point conversion function
def rhPointToPoint(rhPoint):
	rhPointX = rhPoint.Location.X
	rhPointY = rhPoint.Location.Y
	rhPointZ = rhPoint.Location.Z
	dsPoint = Point.ByCoordinates(rhPointX, rhPointY, rhPointZ)
	return dsPoint

#single span nurbs curve conversion function
def rhSingleSpanNurbsCurveToCurve(rhCurve):		
	#get control points
	ptArray, weights, knots = [], [], []
	rhControlPoints = rhCurve.Points
	for rhPoint in rhControlPoints:
		dsPoint = rhPointToPoint(rhPoint)
		ptArray.append(dsPoint)
		#get weights for each point
		weights.append(rhPoint.Weight)
	#convert Python list to IEnumerable[]
	ptArray = List[Point](ptArray)
	weights = Array[float](weights)
	#get degree of the curve
	degree = rhCurve.Degree
	#get knots of the curve
	rhKnots = rhCurve.Knots
	for i in rhKnots:
		knots.append(i)
	knots.insert(0, knots[0])
	knots.insert(len(knots), knots[(len(knots)-1)])
	knots = Array[float](knots)
	#create ds curve from points, weights and knots
	dsNurbsCurve = NurbsCurve.ByControlPointsWeightsKnots(ptArray, weights, knots, degree)
	ptArray.Clear()
	Array.Clear(weights, 0, len(weights))
	Array.Clear(knots, 0, len(knots))
	return dsNurbsCurve

#convert rhino/gh geometry to ds geometry
dsNurbsCurves = []
for i in rhObjects:
	try:
		i = i.Geometry
	except:
		pass
	if i.ToString() == "Rhino.Geometry.NurbsCurve":
		dsNurbsCurves.append(rhSingleSpanNurbsCurveToCurve(i))

#Assign your output to the OUT variable
OUT = dsNurbsCurves</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="4edbd372-bf03-401c-a338-af412860ca66" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Rhino Object(s)" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="603c1335-feb4-4e19-8f85-737e15989bd6" nickname="Output" x="449" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="NurbsCurve(s)" />
    </Dynamo.Nodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="ee77b5c7-926a-492a-8711-23a15596ac3a" start_index="0" end="603c1335-feb4-4e19-8f85-737e15989bd6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4edbd372-bf03-401c-a338-af412860ca66" start_index="0" end="ee77b5c7-926a-492a-8711-23a15596ac3a" end_index="0" portType="0" />
  </Connectors>
  <Notes />
</Workspace>