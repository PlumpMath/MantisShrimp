<Workspace Version="0.7.2.24887" X="-75.6188811015119" Y="174.303203293736" zoom="1.33823125" Description="Converts Rhino/Grasshopper meshes to Design Script meshes." Category="Archi-lab_MantisShrimp.ReadRhino" Name="RH Mesh to DS Mesh" ID="1da4f6c4-a8ef-495d-8bec-5e6342493a87">
  <Elements>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="393e2c6f-3e7d-4ae0-b02e-ff8bd9c377ce" nickname="Python Script" x="359.165974068158" y="0.647508487364121" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="1">
      <Script>#Copyright(c) 2014, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
import sys
clr.AddReference('ProtoGeometry')

RhinoCommonPath = r'C:\Program Files\Rhinoceros 5 (64-bit)\System'
if RhinoCommonPath not in sys.path:
	sys.path.Add(RhinoCommonPath)
clr.AddReferenceToFileAndPath(RhinoCommonPath + r"\RhinoCommon.dll")

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

import Rhino as rc
from Autodesk.DesignScript.Geometry import *
import math

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN
rhObjects = IN[0]

#3dPoint Conversion
def rhPoint3dToPoint(rhPoint):
	rhPointX = rhPoint.X
	rhPointY = rhPoint.Y
	rhPointZ = rhPoint.Z
	dsPoint = Point.ByCoordinates(rhPointX, rhPointY, rhPointZ)
	return dsPoint

def rhMeshToMesh(rhMesh):
	vertexPositions, indices, indexGroups = [], [], []
	faces = rhMesh.Faces
	topologyVerticesList = rhMesh.TopologyVertices
	for i in range(0, rhMesh.Faces.Count, 1):
		indices.append(faces.GetTopologicalVertices(i))
	for i in range(0, topologyVerticesList.Count, 1):
		vertexPositions.append(rhPoint3dToPoint(topologyVerticesList.Item[i]))
	for i in indices:
		if len(i) == 3:
			a = i[0]
			b = i[1]
			c = i[2]
			indexGroups.append(IndexGroup.ByIndices(a,b,c))
		elif len(i) == 4:
			a = i[0]
			b = i[1]
			c = i[2]
			d = i[3]
			indexGroups.append(IndexGroup.ByIndices(a,b,c,d))
	dsMesh = Mesh.ByPointsFaceIndices(vertexPositions, indexGroups)
	del vertexPositions[:]
	del indices[:]
	del indexGroups[:]
	return dsMesh

#convert rhino/gh geometry to ds geometry
dsMeshes = []
for i in rhObjects:
	try:
		i = i.Geometry
	except:
		pass
	if i.ToString() == "Rhino.Geometry.Mesh":
		dsMeshes.append(rhMeshToMesh(i))
		
#Assign your output to the OUT variable
OUT = dsMeshes
</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="a2142bae-4413-495b-b4a6-a4eae3995776" nickname="Output" x="513.165974068158" y="1" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Mesh(es)" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="2a0c4cc6-0497-42ae-9ac4-e4c339e2f6de" nickname="Input" x="249.430549541802" y="0.279228052897139" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Object(s)" />
    </Dynamo.Nodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="393e2c6f-3e7d-4ae0-b02e-ff8bd9c377ce" start_index="0" end="a2142bae-4413-495b-b4a6-a4eae3995776" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="2a0c4cc6-0497-42ae-9ac4-e4c339e2f6de" start_index="0" end="393e2c6f-3e7d-4ae0-b02e-ff8bd9c377ce" end_index="0" portType="0" />
  </Connectors>
  <Notes />
</Workspace>